
//=============================================================================//
// 
// Name : RayIntersect.h
// Describe : レイ交差処理
// Author : 
// Create Date : 2018/05/01
// Modify Date : 2018/06/05
//=============================================================================//
#ifndef _RAYINTERSECT_H_
#define _RAYINTERSECT_H_

//*****************************************************************************//
// (1) インクルードファイル
//*****************************************************************************//
#include "D3DUtility.h"				// Directx9インクルードファイル処理

#include "WorldTransform.h"				// ワールドトランスフォーム処理
//*****************************************************************************//
// (2) マクロ定義
//*****************************************************************************//

//*****************************************************************************//
// (3) ユーザー定義データ型
//*****************************************************************************//

// { 列挙型 }

// { 構造体 }

// { クラス }
// レイ交差情報クラス
class CRay
{
public:
	BOOL bHit;						// 交差フラグ
	FLOAT fHitDistance;				// レイと交差点の距離
	D3DXVECTOR3 vHitNormal;			// 交差面の法線

	D3DXVECTOR3 vStart;				// レイの座標
	D3DXVECTOR3 vDirection;			// レイの方向
public:
	CRay();							// コンストラクタ
	~CRay();						// デストラクタ
public:
	BOOL RayCollision(D3DXVECTOR3 position, D3DXVECTOR3 direction, LPD3DXMESH pTargetMesh, WorldTransform* Target);	// メッシュとレイ交差判定
private:
	HRESULT FindVerticesOnPoly(LPD3DXMESH pMesh, DWORD dwPolyIndex, D3DXVECTOR3* pvVertices);		// 交差点計算
};
//*****************************************************************************//
// (4) プロトタイプ宣言(外部でも使える関数)
//*****************************************************************************//

#endif