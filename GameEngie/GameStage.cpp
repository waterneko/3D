
//=============================================================================//
// 
// Name : GameStage.cpp
// Describe : ゲームステージ処理
// Author : 
// Create Date : 2018/05/01
// Modify Date : 2018/06/05
//=============================================================================//

//*****************************************************************************//
// (1) インクルードファイル
//*****************************************************************************//
#include "GameStage.h"				// ゲームステージ処理

//*****************************************************************************//
// (2) マクロ定義
//*****************************************************************************//

//*****************************************************************************//
// (3) ユーザー定義データ関数 (クラス関数)
//*****************************************************************************//

//-----------------------------------------------------------------------------
// NAME: StageInstance::StageInstance()
// DESC: ゲームステージ処理 コンストラクタ
//-----------------------------------------------------------------------------
StageInstance::StageInstance()
{
	iCurrentState = SS_Loading;
	iTargetState = SS_Loading;

	// ソース管理を取得する
	pSourceManager = SourceManager::GetInstance();
}

//-----------------------------------------------------------------------------
// NAME: StageInstance::~StageInstance()
// DESC: ゲームステージ処理 デストラクタ
//-----------------------------------------------------------------------------
StageInstance::~StageInstance()
{
	UninitStage();
}

//-----------------------------------------------------------------------------
// NAME: HRESULT StageInstance::LoadStage()
// DESC: ゲームステージ処理 ゲームタイトル読込み
//-----------------------------------------------------------------------------
HRESULT	StageInstance::LoadStage()
{
	return S_OK;
}

//-----------------------------------------------------------------------------
// NAME: VOID StageInstance::UpdatePlayerController()
// DESC: ゲームステージ処理 ゲームステージの解放
//-----------------------------------------------------------------------------
VOID StageInstance::UninitStage()
{

}

//-----------------------------------------------------------------------------
// NAME: VOID StageInstance::UpdatePlayerController()
// DESC: ゲームステージ処理 ゲームステージコントローラーの総更新処理
//-----------------------------------------------------------------------------
VOID StageInstance::UpdateController()
{

}

//-----------------------------------------------------------------------------
// NAME: VOID StageInstance::UpdateStage()
// DESC: ゲームステージ処理 ゲームステージの総更新処理
//-----------------------------------------------------------------------------
VOID StageInstance::UpdateStage()
{

}

//-----------------------------------------------------------------------------
// NAME: VOID StageInstance::RenderStage()
// DESC: ゲームステージ処理 ゲームステージの総描画
//-----------------------------------------------------------------------------
VOID StageInstance::RenderStage()
{

}

//-----------------------------------------------------------------------------
// NAME: LPDIRECT3DTEXTURE9 StageInstance::SetTexture(UINT n)
// DESC: ゲームステージ処理 テクスチャ設置
//-----------------------------------------------------------------------------
LPDIRECT3DTEXTURE9 StageInstance::SetTexture(UINT n)
{
	if (n <= pSourceManager->GetTextureNum())
	{
		return pSourceManager->GetTextureFile(n)->GetTexture();
	}
	else
	{
		return pSourceManager->GetTextureFile(pSourceManager->GetTextureNum())->GetTexture();
	}
}

//-----------------------------------------------------------------------------
// NAME: SXfile* StageInstance::SetXfile(UINT n)
// DESC: ゲームステージ処理 xファイル設置
//-----------------------------------------------------------------------------
SXfile* StageInstance::SetXfile(UINT n)
{
	if (n <= pSourceManager->GetTextureNum())
	{
		return pSourceManager->GetXfile(n);
	}
	else
	{
		return pSourceManager->GetXfile(pSourceManager->GetTextureNum());
	}
}

//-----------------------------------------------------------------------------
// NAME: SAnimXfile* SceneInstance::SetAnimXfile(UINT n)
// DESC: ゲームステージ処理 アニメーションxファイル設置
//-----------------------------------------------------------------------------
SAnimXfile* StageInstance::SetAnimXfile(UINT n)
{
	if (n <= pSourceManager->GetAnimXfileNum())
	{
		return pSourceManager->GetAnimXfile(n);
	}
	else
	{
		return pSourceManager->GetAnimXfile(pSourceManager->GetAnimXfileNum());
	}
}

//-----------------------------------------------------------------------------
// NAME: SWavfile* StageInstance::SetWavfile(UINT n)
// DESC: ゲームステージ処理 Wavファイル設置
//-----------------------------------------------------------------------------
SWavfile* StageInstance::SetWavfile(UINT n)
{
	if (n <= pSourceManager->GetWavfileNum())
	{
		return pSourceManager->GetWavfile(n);
	}
	else
	{
		return pSourceManager->GetWavfile(pSourceManager->GetWavfileNum());
	}
}

//*****************************************************************************//
// (4) グローバル変数:
//*****************************************************************************//

//*****************************************************************************//
// (5) プロトタイプ宣言(自分だけ使える関数)
//*****************************************************************************//

//*****************************************************************************//
// (6) 関数
//*****************************************************************************//