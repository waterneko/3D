
//=============================================================================//
// 
// Name : Mesh.cpp
// Describe : メッシュ処理
// Author : 
// Create Date : 2018/05/01
// Modify Date : 2018/06/05
//=============================================================================//

//*****************************************************************************//
// (1) インクルードファイル
//*****************************************************************************//
#include "Mesh.h"				// メッシュ処理

//*****************************************************************************//
// (2) マクロ定義
//*****************************************************************************//

//*****************************************************************************//
// (3) ユーザー定義データ関数 (クラス関数)
//*****************************************************************************//

//-----------------------------------------------------------------------------
// NAME: BMesh::BMesh(LPDIRECT3DDEVICE9 D3dDevice)
// DESC: メッシュ処理 コンストラクタ
//-----------------------------------------------------------------------------
BMesh::BMesh(LPDIRECT3DDEVICE9 D3dDevice)
{
	pDevice = D3dDevice;

	bUpdate = true;
	bRender = true;
}

//-----------------------------------------------------------------------------
// NAME: BMesh::~BMesh()
// DESC: メッシュ処理 デストラクタ
//-----------------------------------------------------------------------------
BMesh::~BMesh()
{

}

//-----------------------------------------------------------------------------
// NAME: VOID BMesh::UpdateMesh()
// DESC: メッシュ処理 メッシュ更新
//-----------------------------------------------------------------------------
VOID BMesh::UpdateMesh()
{
	if (bUpdate)
	{
		// 毎フレームワールドマトリックスの初期化(ベクトル移動可能)
		D3DXMatrixIdentity(&mtxWorld);

		// ワールドトランスフォーム
		UpdateWorldTransform();
	}
}

//-----------------------------------------------------------------------------
// NAME: VOID BMesh::RenderMesh(BXfile* xfile)
// DESC: メッシュ処理 メッシュ描画(xファイル)
//-----------------------------------------------------------------------------
VOID BMesh::RenderMesh(SXfile* xfile)
{
	// セットワールドマトリクス
	pDevice->SetTransform(D3DTS_WORLD, &mtxWorld);

	if (bRender)
	{
		// メッシュの繰り返し
		for (DWORD i = 0; i < xfile->dwNumMaterials; i++)
		{
			//マテリアルとテクスチャの設定
			pDevice->SetMaterial(&xfile->pMeshMaterials[i]);
			pDevice->SetTexture(0, xfile->pMeshTextures[i]);
			//モデルのレダリング
			xfile->GetMesh()->DrawSubset(i);
		};
	}
}

//-----------------------------------------------------------------------------
// NAME: VOID BMesh::RenderSelectMesh(int Num, SXfile* xfile)
// DESC: メッシュ処理 メッシュ描画(xファイル)番号
//-----------------------------------------------------------------------------
VOID BMesh::RenderSelectMesh(int Num, SXfile* xfile)
{
	// セットワールドマトリクス
	pDevice->SetTransform(D3DTS_WORLD, &mtxWorld);

	if (bRender)
	{
		// メッシュの繰り返し
		for (DWORD i = 0; i < xfile->dwNumMaterials; i++)
		{
			if (i == Num)
			{
				//マテリアルとテクスチャの設定
				pDevice->SetMaterial(&xfile->pMeshMaterials[i]);
				pDevice->SetTexture(0, xfile->pMeshTextures[i]);
				//モデルのレダリング
				xfile->GetMesh()->DrawSubset(i);
			}
		};
	}
}

//*****************************************************************************//
// (4) グローバル変数:
//*****************************************************************************//

//*****************************************************************************//
// (5) プロトタイプ宣言(自分だけ使える関数)
//*****************************************************************************//

//*****************************************************************************//
// (6) 関数
//*****************************************************************************//