
//=============================================================================//
// 
// Name : GameTexture.cpp
// Describe : ゲームテクスチャ処理
// Author : 
// Create Date : 2018/05/01
// Modify Date : 2018/06/05
//=============================================================================//

//*****************************************************************************//
// (1) インクルードファイル
//*****************************************************************************//
#include "GameTexture.h"				// ゲームテクスチャ処理

//*****************************************************************************//
// (2) マクロ定義
//*****************************************************************************//

//*****************************************************************************//
// (3) ユーザー定義データ関数 (クラス関数)
//*****************************************************************************//

//-----------------------------------------------------------------------------
// NAME: GTexture::GTexture(LPDIRECT3DDEVICE9 D3dDevice)
// DESC: ゲームテクスチャ処理 コンストラクタ
//-----------------------------------------------------------------------------
GTexture::GTexture(LPDIRECT3DDEVICE9 D3dDevice) : BScreenTexture(D3dDevice)
{
	pDevice = D3dDevice;

	bUpdate = true;
	bRender = true;

	vSize = D3DXVECTOR2(0.0f, 0.0f);
	vScreenPosition = D3DXVECTOR2(0.0f, 0.0f);

	ScreenVtx[NUM_VERTEX_SCREENTEXTURE];
}

//-----------------------------------------------------------------------------
// NAME: GTexture::~GTexture()
// DESC: ゲームテクスチャ処理 デストラクタ
//-----------------------------------------------------------------------------
GTexture::~GTexture()
{

}

//-----------------------------------------------------------------------------
// NAME: HRESULT GTexture::InitGameTexture(D3DXVECTOR2 size, D3DXVECTOR2 position)
// DESC: ゲームテクスチャ処理 ゲームテクスチャ初期化
//-----------------------------------------------------------------------------
HRESULT GTexture::InitGameTexture(D3DXVECTOR2 size, D3DXVECTOR2 position)
{
	InitScreenTexture(size, position);

	return S_OK;
}

//-----------------------------------------------------------------------------
// NAME: VOID GTexture::UpdateGameTexture()
// DESC: ゲームテクスチャ処理 ゲームテクスチャ更新
//-----------------------------------------------------------------------------
VOID GTexture::UpdateGameTexture()
{
	if (bUpdate)
	{
		// アルファ値更新
		UpdateAlpha();
	}
}

//-----------------------------------------------------------------------------
// NAME: VOID GTexture::RenderGameTexture(LPDIRECT3DTEXTURE9 texture)
// DESC: ゲームテクスチャ処理 ゲームテクスチャ描画
//-----------------------------------------------------------------------------
VOID GTexture::RenderGameTexture(LPDIRECT3DTEXTURE9 texture)
{
	if (bRender)
	{
		RenderScreenTexture(texture);
	}
}

//*****************************************************************************//
// (4) グローバル変数:
//*****************************************************************************//

//*****************************************************************************//
// (5) プロトタイプ宣言(自分だけ使える関数)
//*****************************************************************************//

//*****************************************************************************//
// (6) 関数
//*****************************************************************************//